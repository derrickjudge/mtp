/**
 * API route for generating presigned URLs for S3 uploads
 * This allows clients to upload directly to S3 without exposing credentials
 */

import { NextRequest, NextResponse } from 'next/server';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { v4 as uuidv4 } from 'uuid';
import { isAuthenticated, isAdmin } from '@/lib/auth';
import { rateLimiter } from '@/lib/rate-limiter';

// Create S3 client with credentials from environment variables
const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'us-west-2',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID || '',
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || '',
  }
});

const S3_BUCKET = process.env.AWS_S3_BUCKET || 'mtp-photography-assets';
const ALLOWED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp'];
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

export async function POST(req: NextRequest) {
  try {
    // Apply rate limiting
    const rateLimitResult = await rateLimiter(req);
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { message: 'Rate limit exceeded' },
        { status: 429 }
      );
    }
    
    // Check if user is authenticated and admin
    const authResult = isAuthenticated(req);
    if (authResult) {
      return authResult;
    }
    
    const adminResult = isAdmin(req);
    if (adminResult) {
      return adminResult;
    }

    // Get file details from request body
    const { fileName, fileType, fileSize } = await req.json();
    
    // Validate input
    if (!fileName || !fileType) {
      return NextResponse.json(
        { message: 'File name and type are required' },
        { status: 400 }
      );
    }
    
    // Validate file type
    if (!ALLOWED_MIME_TYPES.includes(fileType)) {
      return NextResponse.json(
        { message: 'Unsupported file type. Only JPG, PNG, and WebP are allowed.' },
        { status: 400 }
      );
    }
    
    // Validate file size
    if (fileSize && fileSize > MAX_FILE_SIZE) {
      return NextResponse.json(
        { message: 'File size exceeds the 10MB limit' },
        { status: 400 }
      );
    }
    
    // Generate unique file key (name) to prevent overwriting
    const fileExtension = fileName.split('.').pop();
    const uniqueFileName = `${uuidv4()}.${fileExtension}`;
    const currentDate = new Date();
    
    // Create organized folder structure by year/month
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    
    // The full key for the original photo
    const fileKey = `uploads/${year}/${month}/${uniqueFileName}`;
    
    // The key for the thumbnail version (will be generated by an AWS Lambda trigger or processed later)
    const thumbnailKey = `uploads/${year}/${month}/thumbnails/${uniqueFileName}`;
    
    // Create the command to put the object in S3
    const command = new PutObjectCommand({
      Bucket: S3_BUCKET,
      Key: fileKey,
      ContentType: fileType,
    });
    
    // Generate presigned URL for secure client-side upload
    const expirationSeconds = 60 * 5; // URL expires in 5 minutes
    const uploadUrl = await getSignedUrl(s3Client, command, { expiresIn: expirationSeconds });
    
    // Return the presigned URL and the public URLs for file access
    // For production, use proper CloudFront distribution URL
    const baseUrl = process.env.NODE_ENV === 'production'
      ? `https://${S3_BUCKET}.s3.amazonaws.com`
      : `https://${S3_BUCKET}.s3.${process.env.AWS_REGION || 'us-west-2'}.amazonaws.com`;
    
    const fileUrl = `${baseUrl}/${fileKey}`;
    const thumbnailUrl = `${baseUrl}/${thumbnailKey}`;
    
    return NextResponse.json({
      uploadUrl,
      fileUrl,
      thumbnailUrl,
      fileKey,
      thumbnailKey,
      expiresIn: expirationSeconds,
    }, { status: 200 });
    
  } catch (error: any) {
    console.error('Error generating upload URL:', error);
    return NextResponse.json(
      { message: 'Error generating upload URL', error: error.message },
      { status: 500 }
    );
  }
}
